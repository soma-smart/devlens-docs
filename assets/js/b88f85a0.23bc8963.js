"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[905],{2707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Example","title":"Example","description":"Don\'t use SELECT *","source":"@site/docs/2- Example.md","sourceDirName":".","slug":"/Example","permalink":"/doc-devlens/Example","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Usage Command","permalink":"/doc-devlens/Usage command"},"next":{"title":"Abstract Syntax Tree","permalink":"/doc-devlens/How it works/Abstract Syntax Tree"}}');var a=t(4848),o=t(8453);const s={},i="Example",l={},c=[{value:"Don&#39;t use SELECT *",id:"dont-use-select-",level:2},{value:"Don&#39;t use different DB environnement in the same file",id:"dont-use-different-db-environnement-in-the-same-file",level:2},{value:"Use right dependencies",id:"use-right-dependencies",level:2},{value:"Retrieve your Environnement variable directly from your Kubernetes secrets",id:"retrieve-your-environnement-variable-directly-from-your-kubernetes-secrets",level:2},{value:"Replace &#39;HDFS&#39; to &#39;S3&#39;",id:"replace-hdfs-to-s3",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"example",children:"Example"})}),"\n",(0,a.jsx)(n.h2,{id:"dont-use-select-",children:"Don't use SELECT *"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to be sure there isn't any ",(0,a.jsx)(n.code,{children:"SELECT *"})," in your whole project , an annotator can find every occurence of Wildcard in your code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from annotators.common.abstract_annotator import AbstractAnnotator\nfrom annotators.common.search import findAll\nfrom annotators.common.annotation import Annotation\n\nfrom antlr4 import ParserRuleContext\n\n\nclass SparkSQLSelectWildcard(AbstractAnnotator):\n    def parse(self, ast: ParserRuleContext):\n        selectClause = findAll(ast, "SelectClause")\n        namedExpressionSeq = findAll(selectClause, "NamedExpressionSeq")\n        star = findAll(namedExpressionSeq, "Star")\n\n        for match in star:\n            yield Annotation(\n                name="Select_Wildcard",\n                context=match,\n            )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can then query your database to check if this annotator found any ",(0,a.jsx)(n.code,{children:"SELECT *"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:'SELECT path FROM annotation WHERE name= "Select_Wildcard"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.img,{alt:"select-wildcard-query",src:t(4045).A+"",title:"select-wildcard-query",width:"1401",height:"472"})]}),"\n",(0,a.jsx)(n.h2,{id:"dont-use-different-db-environnement-in-the-same-file",children:"Don't use different DB environnement in the same file"}),"\n",(0,a.jsx)(n.p,{children:"If you want to be sure the same environnement is used in each file you can create a annotator that will get every db env of your project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from annotators.common.abstract_annotator import AbstractAnnotator\nfrom annotators.common.search import findAll\nfrom annotators.common.annotation import Annotation\n\nfrom antlr4 import ParserRuleContext\n\nENV_LIST = ["DEV", "INT", "REC", "PRD"]\n\n\nclass SparkSQLTableEnv(AbstractAnnotator):\n    def parse(self, ast: ParserRuleContext):\n        fromClause = findAll(ast, "FromClause")\n        tableNames = findAll(fromClause, "TableName")\n        multipartIdentifier1 = findAll(tableNames, "MultipartIdentifier")\n\n        insertInto = findAll(ast, "InsertIntoTable")\n        multipartIdentifier2 = findAll(insertInto, "MultipartIdentifier")\n\n        all_names = multipartIdentifier1 + multipartIdentifier2\n\n        for match in all_names:\n            starting_str = self.getText(match).split("_")[0].upper()\n            if starting_str in ENV_LIST:\n                yield Annotation(name="Table_Env", value=starting_str, context=match)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then you can query the ",(0,a.jsx)(n.strong,{children:"Devlens"})," DB:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:"SELECT path FROM annotation WHERE name = 'Table_Env' AND name IN (SELECT name FROM annotation WHERE name = 'Table_Env' GROUP BY name HAVING COUNT(DISTINCT value) > 1)ORDER BY path;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["`\n",(0,a.jsx)(n.img,{alt:"env-diff-query",src:t(7237).A+"",title:"env-diff-query",width:"1477",height:"482"})]}),"\n",(0,a.jsx)(n.h2,{id:"use-right-dependencies",children:"Use right dependencies"}),"\n",(0,a.jsx)(n.p,{children:"An annotator can retreive every dependencies importation in a project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from annotators.common.abstract_annotator import AbstractAnnotator\nfrom annotators.common.search import findAll\nfrom annotators.common.annotation import Annotation\n\nfrom antlr4 import ParserRuleContext\n\n\nclass PythonFromImportAnnotator(AbstractAnnotator):\n    def parse(self, ast: ParserRuleContext):\n        importStmts = findAll(ast, "Import_stmt")\n        importFroms = findAll(importStmts, "Import_from")\n\n        for importFrom in importFroms:\n            names = findAll(importFrom, "Dotted_name")\n            importFromAsNames = findAll(importFrom, "Import_from_as_name")\n\n            module = names[0].getText()\n            for submodule in importFromAsNames:\n                yield Annotation(\n                    name="From_Import",\n                    value=module + "." + submodule.getText(),\n                    context=submodule,\n                )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can then query the ",(0,a.jsx)(n.strong,{children:"Devlens"})," DB :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT value FROM annotation WHERE name = "From_Import";\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.img,{alt:"from-import-query",src:t(3962).A+"",title:"from-import-query",width:"1477",height:"568"})]}),"\n",(0,a.jsx)(n.h2,{id:"retrieve-your-environnement-variable-directly-from-your-kubernetes-secrets",children:"Retrieve your Environnement variable directly from your Kubernetes secrets"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Devlens"})," is able to retreive your environnement variable automatically just by giving your config file path:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"kube-analyze",src:t(845).A+"",title:"kube-analyze",width:"1477",height:"535"})}),"\n",(0,a.jsxs)(n.p,{children:["Then you can query the ",(0,a.jsx)(n.strong,{children:"Devlens"})," DB:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT path,value FROM annotation WHERE name='os.getenv';\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"kube-query",src:t(2445).A+"",title:"kube-query",width:"1477",height:"397"})}),"\n",(0,a.jsx)(n.p,{children:"Imagine you are doing a full upgrade of your application and need to be sure you swapped every old version of a function;"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Devlens"})," can analyze your whole project and tell you exactly in which file and which lines are your old code."]}),"\n",(0,a.jsxs)(n.p,{children:["You found something you want to change globally in your project ? use the ",(0,a.jsx)(n.strong,{children:"Replace"})," to modify you whole projet with values you want."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Devlens"})," can be integrated seamless in your developpement process since it also work directly  in your ",(0,a.jsx)(n.strong,{children:"CI"}),"!"]}),"\n",(0,a.jsx)(n.p,{children:"It also integrate a Dataiku connection to retreive easily your project from any dataiku instance !"}),"\n",(0,a.jsx)(n.h2,{id:"replace-hdfs-to-s3",children:"Replace 'HDFS' to 'S3'"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7237:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/env-diff-query-54b7a2f7a7a608f2b2387ebe0bae8111.png"},3962:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/from-import-query-5948c01a7a2f0360364785682bb0cbf7.png"},845:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/kube-analyze-91b7fd6067c33528453090ca9ce082d7.png"},2445:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/kube-query-3a7bb203a5755a2bd33f517a8e39a08b.png"},4045:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/select-wildcard-query-fbad98e5cd3e172f51bc055a49a58e94.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);