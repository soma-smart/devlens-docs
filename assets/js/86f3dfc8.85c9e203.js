"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[315],{1824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=n(4848),s=n(8453);const a={},i="Annotation",r={id:"Devlens-CLI/Annotation",title:"Annotation",description:"The next step is to \"catch\" the node you want. Binaries in the release comes with an 'annotators/' folder already filled with some example.",source:"@site/docs/Devlens-CLI/4 - Annotation.md",sourceDirName:"Devlens-CLI",slug:"/Devlens-CLI/Annotation",permalink:"/devlens-docs/Devlens-CLI/Annotation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax Tree (AST)",permalink:"/devlens-docs/Devlens-CLI/AST"},next:{title:"Query",permalink:"/devlens-docs/Devlens-CLI/Query"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"annotation",children:"Annotation"})}),"\n",(0,o.jsx)(t.p,{children:"The next step is to \"catch\" the node you want. Binaries in the release comes with an 'annotators/' folder already filled with some example."}),"\n",(0,o.jsx)(t.p,{children:"Here is a peak of the Annotator that will store every import of your project:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'class PythonImportAnnotator(AbstractAnnotator):\n    """\n    PythonImportAnnotator is an annotator class that identifies import statements in Python code.\n    """\n    def parse(self, ast: ParserRuleContext):\n    """\n       Methods:\n    --------\n    parse(ast: ParserRuleContext):\n        Parses the provided AST to find and yield annotations for Python import statements.\n        It searches for import statements, import names, and dotted names within the AST.\n\n        Parameters:\n        -----------\n        ast : ParserRuleContext\n            The abstract syntax tree to be parsed for import statements.\n\n        Yields:\n        -------\n        Annotation\n            An annotation object containing the name "Import", the value of the import statement,\n            and the context in which the import statement was found.\n    """\n        importStmts = findAll(ast, "Import_stmt")\n        importNames = findAll(importStmts, "Import_name")\n        names = findAll(importNames, "Dotted_name")\n\n        for match in names:\n            yield Annotation(name="Import", value=self.getText(match), context=match)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["What interest us in this example is mostly the use of ",(0,o.jsx)(t.code,{children:"findAll()"})," method. This method will create a list of every node you want in the AST."]}),"\n",(0,o.jsxs)(t.p,{children:["You just have to use the ",(0,o.jsx)(t.code,{children:"findAll()"})," on each node you want to filter until you get the value of the node."]}),"\n",(0,o.jsxs)(t.p,{children:["The last part is to create an Annotation for each match you have. You can choose to not store a value in the Annotation by passing ",(0,o.jsx)(t.code,{children:"None"})," to the annotation."]}),"\n",(0,o.jsxs)(t.p,{children:["Executing a ",(0,o.jsx)(t.code,{children:"checkf"})," or a ",(0,o.jsx)(t.code,{children:"checkd"})," will result on the creation of Annotations and the filling of the database."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"SQLite Annotation",src:n(8111).A+"",title:"SQLite Annotation",width:"1268",height:"683"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8111:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/db-912e315177e009b939fd4ff00debc149.png"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);